@model IEnumerable<Entities.Data.EF_Core.DatabaseEntities.TelevisionShow>

@{
    ViewData["Title"] = "Television Library";

    List<object> toolbarItems = new List<object>();

    //toolbarItems.Add("Edit");
    //toolbarItems.Add("Delete");
    //toolbarItems.Add("Update");

    toolbarItems.Add("ExcelExport");
    toolbarItems.Add("Search");
}

<style>
    #hideColumns{
        display: none;
    }
</style>

<script>
    function loadGrid() {
        var grid = document.getElementById('Grid').ej2_instances[0];
        var rowHeight = grid.getRowHeight();  //height of each row
        var gridHeight = grid.height;  //grid height
        var pageSize = grid.pageSettings.pageSize;   //initial page size
        var pageResize = (gridHeight - (pageSize * rowHeight)) / rowHeight; //new page size is obtained here
        grid.pageSettings.pageSize = pageSize + Math.round(pageResize);         

        //Create our Seasons child grid for each show 
        this.childGrid = {
            dataSource: null,
            allowPaging: false,             
            dataBound: function (args) {
                this.getHeaderTable().remove(); 
                this.getContent().css("border-top", "1px solid #c8c8c8;");
            },
            columns: [
                { field: 'SeasonName', textAlign: 'Left', width: 100 },
            ],
            created: createSeasonsGrid
        };
    }

</script>
<script>
    function createSeasonsGrid() {

        // render seasons grid data
        this.dataSource = this.parentDetails.parentRowData.TelevisionSeasons;
        this.query = new ej.data.Query();

        //Create our Episodes child grid for each season within each show
        this.childGrid = {
            dataSource: null,
            allowPaging: true,
            pageSettings: { pageSize: 5 },
            columns: [
                { field: 'EpisodeNumber', headerTextAlign: "Center", headerText: '#', width: 50 },
                { field: 'EpisodePath', headerTextAlign: "Center", headerText: 'Episode Name', width: 150 }
            ],
            created: createEpisodesGrid
        };
    }

    function createEpisodesGrid() {

        // render episodes grid data
        this.dataSource = this.parentDetails.parentRowData.TelevisionEpisodes;
        this.query = new ej.data.Query();
    }

</script>

<h1>Television Show Library</h1>

<ejs-grid id="Grid" 
          allowExcelExport="true" 
          allowSelection="true" 
          toolbar=toolbarItems 
          dataSource="@Model" 
          allowSorting="true" 
          allowPaging="true" 
          width="100%" 
          height="750" 
          gridLines="Both" 
          load="loadGrid">

    <e-grid-columns>
        <e-grid-column field="Id" headerTemplate="#header_id_template" headerTextAlign="Center" width="50" />
        <e-grid-column field="ShowName" headerTemplate="#header_name_template" headerTextAlign="Center" width="150" />
        <e-grid-column field="ShowPath" headerTemplate="#header_showPath_template" headerTextAlign="Center" width="170" />
        <e-grid-column field="" headerTemplate="#header_actions_template" template="#content_actions_template" headerTextAlign="Center" width="120" />
    </e-grid-columns>

</ejs-grid>

<script type="text/x-template" id="header_id_template">
    <span style="font-size: 16px; font-weight: bold;">
        Show ID
    </span>
</script>
<script type="text/x-template" id="header_name_template">
    <span style="font-size: 16px; font-weight: bold;">
        Television Show Name
    </span>
</script>
<script type="text/x-template" id="header_showPath_template">
    <span style="font-size: 16px; font-weight: bold;">
        Show Path
    </span>
</script>
<script type="text/x-template" id="header_actions_template">
    <span style="font-size: 16px; font-weight: bold;">
        Actions
    </span>
</script>


<script type="text/x-template" id="content_actions_template">
    <span style="font-size: 16px; font-weight: bold;">
        [Show actions]
    </span>
</script>
